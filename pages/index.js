import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { useEffect, useState } from "react";
import Web3 from "web3";
import {
  tokenContractInstance,
  votingContractInstance,
} from "../service/service";
import Proposal from "../components/Proposal";
import Header from "./Header/Header";
import Infor from "./Infor/Infor";
import Chart from "./Chart/Chart";
export default function Home() {
  const toastOptions = {
    position: "bottom-right",
    autoClose: 8000,
    pauseOnHover: true,
    draggable: true,
    theme: "dark",
  };
  const [web3, setWeb3] = useState(null);
  const [address, setAddress] = useState(null);
  const [tokenContract, setTokenContract] = useState(null);
  const [votingContract, setVotingContract] = useState(null);
  const [addressBalance, setAddressBalance] = useState(null);
  const [balance, setBalance] = useState(null);

  const [amountDeposit, setAmountDeposit] = useState(null);
  const [errorMessage, setErrorMessage] = useState(null);
  const [description, setDescription] = useState(null);
  const [countProposal, setCount] = useState(null);

  const updateAddressBalance = (e) => {
    setAddressBalance(e.target.value);
  };

  const updateAmountDeposit = (e) => {
    setAmountDeposit(e.target.value);
  };

  const updateDescription = (e) => {
    setDescription(e.target.value);
  };

  const handleConnectWallet = async () => {
    if (
      typeof window !== "undefined" &&
      typeof window.ethereum !== "undefined"
    ) {
      try {
        await window.ethereum.request({
          method: "eth_requestAccounts",
        });
        const web3Instance = new Web3(window.ethereum);
        setWeb3(web3Instance);
        const accounts = await web3Instance.eth.getAccounts();
        setAddress(accounts[0]);

        const tokenContractInst = tokenContractInstance(web3Instance);
        setTokenContract(tokenContractInst);
        const votingContractInst = votingContractInstance(web3Instance);
        setVotingContract(votingContractInst);
      } catch (error) {
        console.log(error);
      }
    } else {
      alert("Not install Metamask! Please install wallet");
    }
  };

  const handleGetBalance = async () => {
    console.log(tokenContract);

    const balance = await tokenContract.methods
      .balanceOf(addressBalance)
      .call();
    console.log(
      "ðŸš€ ~ file: index.js:60 ~ handleGetBalance ~ balance:",
      balance
    );
    setBalance(web3.utils.fromWei(balance, "ether"));
    toast.success(
      "The balance that address " + addressBalance + " has " + balance
    );
  };

  const handleDeposit = async () => {
    try {
      await tokenContract.methods.deposit().send({
        from: address,
        value: Number(amountDeposit) * 10 ** 18,
      });
    } catch (error) {
      setErrorMessage(error.message);
    }
  };

  const handleSumbitProposal = async () => {
    try {
      const allowance = await tokenContract.methods
        .allowance(address, votingContract._address)
        .call();
      console.log(Number(web3.utils.fromWei(allowance, "ether")) < 20);
      if (Number(web3.utils.fromWei(allowance, "ether")) < 20) {
        console.log(1);
        await tokenContract.methods
          .approve(votingContract._address, BigInt(20 * 10 ** 18))
          .send({
            from: address,
          });
      }
      console.log(2);
      await votingContract.methods.createProposal(description).send({
        from: address,
      });
    } catch (error) {
      setErrorMessage(error.message);
    }
  };

  useEffect(() => {
    async function fetchData() {
      if (votingContract) {
        const proposalCount = await votingContract.methods
          .proposalCount()
          .call();
        console.log(
          "ðŸš€ ~ file: index.js:116 ~ fetchData ~ proposalCount:",
          proposalCount
        );
        setCount(Number(proposalCount));
      }
    }
    const interval = setInterval(() => {
      fetchData();
    }, 10000);

    return () => clearInterval(interval);
  });

  return (
    <div>
      {/* <Head>
        <title>Voting dapp</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head> */}

      <main>
        <Header
          handleConnectWallet={handleConnectWallet}
          address={address}
        ></Header>
        <div class="my-10 mx-5">
          <div class="grid grid-cols-4 gap-2">
            <div className="col-span-3">
              <Chart></Chart>
            </div>
            <Infor address={address}></Infor>
          </div>
        </div>

        <section>
          <div className="container mx-auto">
            <div className="mb-4">
              <label className="text-lg font-bold text-white">
                Balance of{" "}
              </label>
              <div className="flex">
                <input
                  className="border border-gray-300 rounded px-2 py-1 flex-grow"
                  type="type"
                  placeholder="Enter address to check balance.."
                  onChange={updateAddressBalance}
                />
              </div>
              <button
                onClick={handleGetBalance}
                className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded mt-2"
              >
                Get balance
              </button>
            </div>
          </div>
        </section>

        <section>
          <div className=" container">
            <div className=" field">
              <label className=" lable">Deposit</label>
              <div className=" controle mt-2">
                <input
                  onChange={updateAmountDeposit}
                  className=" input"
                  type=" type"
                  placeholder=" Enter amount deposit..."
                />
              </div>
              <button
                onClick={handleDeposit}
                className=" button is-primary mt-2"
              >
                Deposit
              </button>
            </div>
          </div>
        </section>

        <section>
          <div className=" container">
            <div className=" field">
              <label className=" lable">
                Create a proposal for you community
              </label>
              <div className=" controle mt-2">
                <input
                  onChange={updateDescription}
                  className=" input"
                  type=" type"
                  placeholder=" Enter description..."
                />
              </div>
              <button
                onClick={handleSumbitProposal}
                className=" button is-primary mt-2"
              >
                Submit proposal
              </button>
            </div>
          </div>
        </section>

        <section>
          <div className=" container mb-5">
            <div className=" field">
              <label>List Proposal: {countProposal}</label>
              <div>
                {countProposal > 0 &&
                  Array.from({ length: countProposal }, (_, index) => {
                    return (
                      <Proposal
                        votingContract={votingContract}
                        address={address}
                        id={index}
                        key={index}
                        web3={web3}
                      ></Proposal>
                    );
                  })}
              </div>
            </div>
          </div>
        </section>
        <section>
          <div className=" container has-text-danger">
            <p>{errorMessage}</p>
          </div>
        </section>
        <ToastContainer />
      </main>
    </div>
  );
}
